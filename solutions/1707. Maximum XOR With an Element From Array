/**
https://leetcode.com/problems/maximum-xor-with-an-element-from-array/description/
**/

class Trie:
    def __init__(self):
        self.root = {}

    def insert(self, num: int):
        p = self.root
        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if bit not in p:
                p[bit] = {}
            p = p[bit]
    
    def query(self, num: int):
        if not self.root:
            return -1
        
        p, ans = self.root, 0
        for i in range(31, -1, -1):
            bit = (num >> i) & 1
            if 1 - bit in p:
                p = p[1-bit]
                ans = ans | (1 << i)
            else:
                p = p[bit]

        return ans

class Solution:
    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        nums.sort()
        queries = sorted(enumerate(queries), key = lambda x: x[1][1])
        trie = Trie()
        ans = [-1] * len(queries)
        j = 0
        for i , (x,m) in queries:
            while j < len(nums) and nums[j] <= m:
                trie.insert(nums[j])
                j += 1
            ans[i] = trie.query(x)
        return ans
