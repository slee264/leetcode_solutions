/**
  * https://leetcode.com/problems/design-an-ordered-stream/description/
  * There is a stream of n (idKey, value) pairs arriving in an arbitrary order, 
  * where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.
  * Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. 
  * The concatenation of all the chunks should result in a list of the sorted values.
**/

class OrderedStream {
    String stream[];
    int stream_length;
    int start = 0;

    public OrderedStream(int n) {
        stream = new String [n];
        stream_length = n;
    }
    
    public List<String> insert(int idKey, String value) {
        System.out.println(idKey + " " + value);
        stream[idKey-1] = value;
        List<String> chunk = new ArrayList<String>();
        for(int i = start; i < stream_length; i++){
            if(stream[i] != null){
                chunk.add(stream[i]);
            }else{
                start = i;
                break;
            }
        }

        return chunk;
        
    }
}

/**
 * Your OrderedStream object will be instantiated and called as such:
 * OrderedStream obj = new OrderedStream(n);
 * List<String> param_1 = obj.insert(idKey,value);
 */
